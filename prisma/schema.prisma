generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId           String            @id @default(cuid()) @map("_id")
  clerkUserId      String            @unique
  emplid           String            @unique
  email            String            @unique
  firstName        String?
  lastName         String?
  imageUrl         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userType         UserType          @default(Student)
  professorClasses ProfessorClass[]
  tutorSchedules   TutorSchedule[]
  tutoringSessions TutoringSession[]
}

model TutorSchedule {
  tutorId        String
  assignedClass  String
  assignedDay    String
  shiftStartTime DateTime
  shiftEndTime   DateTime
  class          Class    @relation(fields: [assignedClass], references: [classId])
  user           User     @relation(fields: [tutorId], references: [userId])

  @@id([tutorId, assignedClass, assignedDay])
}

model ProfessorClass {
  professorId String
  classId     String
  class       Class  @relation(fields: [classId], references: [classId])
  user        User   @relation(fields: [professorId], references: [userId])

  @@id([professorId, classId])
}

model Class {
  classId            String            @id @unique @default(cuid())
  className          String
  classSection       Int
  tutoringGuidelines String
  tutorId            String
  Tutor              Tutor             @relation(fields: [tutorId], references: [id])
  classInsights      ClassInsights?
  professorTeaching  ProfessorClass[]
  tutorSchedules     TutorSchedule[]
  tutoringSessions   TutoringSession[]
}

model ClassInsights {
  classId         String @id @unique
  studentInsights String
  tutorInsights   String
  class           Class  @relation(fields: [classId], references: [classId])
}

model TutoringSession {
  sessionId           String              @id @unique @default(cuid())
  tutorId             String
  classTutored        String
  sessionLocation     String?
  chapterReviewed     String?
  classSection        Int
  sessionStartTime    DateTime
  sessionEndTime      DateTime
  numStudentsTutored  Int
  observationsSummary String?
  overallSummary      String?
  sessionConcerns     SessionConcerns?
  sessionInsights     SessionInsights?
  attendees           TutoringAttendees[]
  class               Class               @relation(fields: [classTutored], references: [classId])
  tutor               User                @relation(fields: [tutorId], references: [userId])
}

model TutoringAttendees {
  sessionId    String
  studentName  String
  studentEmail String          @unique
  studentId    String          @unique
  session      TutoringSession @relation(fields: [sessionId], references: [sessionId])

  @@id([sessionId, studentId])
}

model SessionInsights {
  sessionId       String          @id
  studentInsights String
  tutorInsights   String
  session         TutoringSession @relation(fields: [sessionId], references: [sessionId])
}

model SessionConcerns {
  sessionId String          @id
  topic     String
  concerns  String
  session   TutoringSession @relation(fields: [sessionId], references: [sessionId])
}

model Tutor {
  id    String  @id
  uid   String  @unique
  name  String
  Class Class[]
}

enum UserType {
  Professor
  Tutor
  Student
}
