generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// update constraints for all columns

model User {
  userId           String            @id @default(cuid()) @map("_id")
  clerkUserId      String            @unique
  email            String            @unique
  firstName        String?
  lastName         String?
  imageUrl         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userType         UserType          @default(Student)
  tutorSchedules   TutorSchedule[]
  professorClasses ProfessorClass[]
  tutoringSessions TutoringSession[]
}

// model User {
//   userId          String    @id @default(cuid())
//   email             String    @unique
//   password          String
//   name              String
//   joinDate         DateTime  @default(now())
//   Signin_Method     String
//   User_Type         User_Type @default(Student)
//   TA_Schedules      ta_schedules[]
//   Professor_Classes professor_classes[]
//   Tutoring_Sessions tutoring_sessions[]
// }

enum UserType {
  Professor
  Tutor
  Student
}

model TutorSchedule {
  tutorId        String
  assignedClass  String
  Assigned_DOW   String
  shiftStartTime DateTime
  shiftEndTime   DateTime
  user           User     @relation(fields: [tutorId], references: [userId])
  class          Class    @relation(fields: [assignedClass], references: [classId])

  @@id([tutorId, assignedClass]) // Composite primary key
}

model ProfessorClass {
  professorId String
  classId     String
  user        User   @relation(fields: [professorId], references: [userId])
  class       Class  @relation(fields: [classId], references: [classId])

  @@id([professorId, classId]) // Composite primary key
}

model Class {
  classId            String            @id @unique @default(cuid())
  className          String
  classSection       Int
  tutoringGuidelines String
  tutorSchedules     TutorSchedule[]
  professorTeaching  ProfessorClass[]
  tutoringSessions   TutoringSession[]
  classInsights      ClassInsights?
}

model ClassInsights {
  classId         String @id @unique
  studentInsights String
  tutorInsights   String
  class           Class  @relation(fields: [classId], references: [classId])
}

model TutoringSession {
  sessionId          String              @id @unique @default(cuid())
  tutorId            String
  classTutored       String
  sessionLocation    String?
  chapterReviewed    String?
  classSection       Int
  sessionStartTime   DateTime
  sessionEndTime     DateTime
  numStudentsTutored Int
  attendees          TutoringAttendees[]
  tutor              User                @relation(fields: [tutorId], references: [userId])
  class              Class               @relation(fields: [classTutored], references: [classId])
  sessionInsights    SessionInsights?
  sessionConcerns    SessionConcerns?
}

model TutoringAttendees {
  sessionId    String
  studentName  String
  studentEmail String
  studentId    String
  session      TutoringSession @relation(fields: [sessionId], references: [sessionId])

  @@id([sessionId, studentId]) // Composite primary key
}

model SessionInsights {
  sessionId       String          @id
  studentInsights String
  tutorInsights   String
  session         TutoringSession @relation(fields: [sessionId], references: [sessionId])
}

model SessionConcerns {
  sessionId String          @id
  topic     String
  concerns  String
  session   TutoringSession @relation(fields: [sessionId], references: [sessionId])
}
